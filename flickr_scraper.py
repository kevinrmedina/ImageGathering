# Generated by Glenn Jocher (glenn.jocher@ultralytics.com) for https://github.com/ultralytics

import argparse
import os
import time
import hashlib
import re
import random
from flickrapi import FlickrAPI

from utils.general import download_uri

key = '5ba3d282840837296a96c4a88d66d5fc'  # Flickr API key https://www.flickr.com/services/apps/create/apply
secret = 'ddbff8ecb78486a6'


def get_url(self, search):
    flickr = FlickrAPI(key, secret, format='parsed-json')

    random.seed()
    rand_page = random.randrange(1,4000,1)
    
    cats = flickr.photos.search(text=search,  # http://www.flickr.com/services/api/flickr.photos.search.html
                         page=rand_page,
                         per_page=1,
                         extras='url_sq,url_t,url_s,url_q,url_m,url_n,url_z,url_c,url_l,url_o')
    
    photos = cats['photos']
    
    for image in photos['photo']:
        title = image['title']
        try:
            url = image['url_o']
            width = image['width_o']
            height = image['height_o']
        except:
            try:
                url = image['url_l']
                width = image['width_l']
                height = image['height_l']
            except:
                try:
                    url = image['url_c']
                    width = image['width_c']
                    height = image['height_c']
                except:
                    pass

    self['title'] = title
    self['url'] = url
    self['width'] = width
    self['height'] = height

    return url

def download_images(search, download_dir, n):
    dir = download_dir + os.sep + search.replace(' ', '_') + os.sep  # save directory
    if not os.path.exists(dir):
        os.makedirs(dir)

    if os.path.exists(dir + 'download_list.txt') == False:
        open(dir + 'download_list.txt', 'w')

    imgobj = {'title':'A','url':'https','width':'0','height':'0'}

    for i in range(n):
       found = False

       imgurl = get_url(imgobj, search) 

       download_file = open(dir + "download_list.txt", 'r')    
       download_list = download_file.readlines()    
       download_file.close()    
       image_name = (imgurl + ":" + hashlib.md5(str(imgurl).encode('utf-8')).hexdigest())    
       for line in download_list:    
           if image_name in line:
               print(imgurl + " already downloaded.")
               found = True
               break                                                                                                                                                                                                                          
       if found == True:
           continue 

       download_uri(imgurl, dir)
       print("Downloading " + imgurl)
       with open(dir + "download_list.txt", 'a') as download_list: 
           download_list.write(image_name + '\n')
